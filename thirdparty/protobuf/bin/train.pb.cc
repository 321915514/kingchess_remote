// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: train.proto

#include "train.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Triplet::Triplet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.array_)*/{}
  , /*decltype(_impl_._array_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dictionary_)*/{}
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripletDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripletDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripletDefaultTypeInternal() {}
  union {
    Triplet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripletDefaultTypeInternal _Triplet_default_instance_;
PROTOBUF_CONSTEXPR TripletArray::TripletArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.triplets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripletArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripletArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripletArrayDefaultTypeInternal() {}
  union {
    TripletArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripletArrayDefaultTypeInternal _TripletArray_default_instance_;
static ::_pb::Metadata file_level_metadata_train_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_train_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_train_2eproto = nullptr;

const uint32_t TableStruct_train_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Triplet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Triplet, _impl_.array_),
  PROTOBUF_FIELD_OFFSET(::Triplet, _impl_.dictionary_),
  PROTOBUF_FIELD_OFFSET(::Triplet, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TripletArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TripletArray, _impl_.triplets_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Triplet)},
  { 9, -1, -1, sizeof(::TripletArray)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Triplet_default_instance_._instance,
  &::_TripletArray_default_instance_._instance,
};

const char descriptor_table_protodef_train_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013train.proto\";\n\007Triplet\022\r\n\005array\030\001 \003(\005\022"
  "\022\n\ndictionary\030\002 \003(\002\022\r\n\005value\030\003 \001(\001\"*\n\014Tr"
  "ipletArray\022\032\n\010triplets\030\001 \003(\0132\010.Tripletb\006"
  "proto3"
  ;
static ::_pbi::once_flag descriptor_table_train_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_train_2eproto = {
    false, false, 126, descriptor_table_protodef_train_2eproto,
    "train.proto",
    &descriptor_table_train_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_train_2eproto::offsets,
    file_level_metadata_train_2eproto, file_level_enum_descriptors_train_2eproto,
    file_level_service_descriptors_train_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_train_2eproto_getter() {
  return &descriptor_table_train_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_train_2eproto(&descriptor_table_train_2eproto);

// ===================================================================

class Triplet::_Internal {
 public:
};

Triplet::Triplet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Triplet)
}
Triplet::Triplet(const Triplet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Triplet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.array_){from._impl_.array_}
    , /*decltype(_impl_._array_cached_byte_size_)*/{0}
    , decltype(_impl_.dictionary_){from._impl_.dictionary_}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:Triplet)
}

inline void Triplet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.array_){arena}
    , /*decltype(_impl_._array_cached_byte_size_)*/{0}
    , decltype(_impl_.dictionary_){arena}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Triplet::~Triplet() {
  // @@protoc_insertion_point(destructor:Triplet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Triplet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.array_.~RepeatedField();
  _impl_.dictionary_.~RepeatedField();
}

void Triplet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Triplet::Clear() {
// @@protoc_insertion_point(message_clear_start:Triplet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.array_.Clear();
  _impl_.dictionary_.Clear();
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Triplet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float dictionary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_dictionary(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 21) {
          _internal_add_dictionary(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Triplet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Triplet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 array = 1;
  {
    int byte_size = _impl_._array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_array(), byte_size, target);
    }
  }

  // repeated float dictionary = 2;
  if (this->_internal_dictionary_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_dictionary(), target);
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Triplet)
  return target;
}

size_t Triplet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Triplet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 array = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.array_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float dictionary = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dictionary_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double value = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Triplet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Triplet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Triplet::GetClassData() const { return &_class_data_; }


void Triplet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Triplet*>(&to_msg);
  auto& from = static_cast<const Triplet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Triplet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.array_.MergeFrom(from._impl_.array_);
  _this->_impl_.dictionary_.MergeFrom(from._impl_.dictionary_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Triplet::CopyFrom(const Triplet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Triplet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Triplet::IsInitialized() const {
  return true;
}

void Triplet::InternalSwap(Triplet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.array_.InternalSwap(&other->_impl_.array_);
  _impl_.dictionary_.InternalSwap(&other->_impl_.dictionary_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Triplet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_train_2eproto_getter, &descriptor_table_train_2eproto_once,
      file_level_metadata_train_2eproto[0]);
}

// ===================================================================

class TripletArray::_Internal {
 public:
};

TripletArray::TripletArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TripletArray)
}
TripletArray::TripletArray(const TripletArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TripletArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.triplets_){from._impl_.triplets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TripletArray)
}

inline void TripletArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.triplets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TripletArray::~TripletArray() {
  // @@protoc_insertion_point(destructor:TripletArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripletArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.triplets_.~RepeatedPtrField();
}

void TripletArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripletArray::Clear() {
// @@protoc_insertion_point(message_clear_start:TripletArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.triplets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripletArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Triplet triplets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_triplets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripletArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TripletArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Triplet triplets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_triplets_size()); i < n; i++) {
    const auto& repfield = this->_internal_triplets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TripletArray)
  return target;
}

size_t TripletArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TripletArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Triplet triplets = 1;
  total_size += 1UL * this->_internal_triplets_size();
  for (const auto& msg : this->_impl_.triplets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripletArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TripletArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripletArray::GetClassData() const { return &_class_data_; }


void TripletArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TripletArray*>(&to_msg);
  auto& from = static_cast<const TripletArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TripletArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.triplets_.MergeFrom(from._impl_.triplets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripletArray::CopyFrom(const TripletArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TripletArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletArray::IsInitialized() const {
  return true;
}

void TripletArray::InternalSwap(TripletArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.triplets_.InternalSwap(&other->_impl_.triplets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TripletArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_train_2eproto_getter, &descriptor_table_train_2eproto_once,
      file_level_metadata_train_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Triplet*
Arena::CreateMaybeMessage< ::Triplet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Triplet >(arena);
}
template<> PROTOBUF_NOINLINE ::TripletArray*
Arena::CreateMaybeMessage< ::TripletArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TripletArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
