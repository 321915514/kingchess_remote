// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: train.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_train_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_train_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_train_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_train_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_train_2eproto;
class Triplet;
struct TripletDefaultTypeInternal;
extern TripletDefaultTypeInternal _Triplet_default_instance_;
class TripletArray;
struct TripletArrayDefaultTypeInternal;
extern TripletArrayDefaultTypeInternal _TripletArray_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Triplet* Arena::CreateMaybeMessage<::Triplet>(Arena*);
template<> ::TripletArray* Arena::CreateMaybeMessage<::TripletArray>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Triplet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Triplet) */ {
 public:
  inline Triplet() : Triplet(nullptr) {}
  ~Triplet() override;
  explicit PROTOBUF_CONSTEXPR Triplet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Triplet(const Triplet& from);
  Triplet(Triplet&& from) noexcept
    : Triplet() {
    *this = ::std::move(from);
  }

  inline Triplet& operator=(const Triplet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Triplet& operator=(Triplet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Triplet& default_instance() {
    return *internal_default_instance();
  }
  static inline const Triplet* internal_default_instance() {
    return reinterpret_cast<const Triplet*>(
               &_Triplet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Triplet& a, Triplet& b) {
    a.Swap(&b);
  }
  inline void Swap(Triplet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Triplet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Triplet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Triplet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Triplet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Triplet& from) {
    Triplet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Triplet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Triplet";
  }
  protected:
  explicit Triplet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 1,
    kDictionaryFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // repeated int32 array = 1;
  int array_size() const;
  private:
  int _internal_array_size() const;
  public:
  void clear_array();
  private:
  int32_t _internal_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_array() const;
  void _internal_add_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_array();
  public:
  int32_t array(int index) const;
  void set_array(int index, int32_t value);
  void add_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_array();

  // repeated float dictionary = 2;
  int dictionary_size() const;
  private:
  int _internal_dictionary_size() const;
  public:
  void clear_dictionary();
  private:
  float _internal_dictionary(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_dictionary() const;
  void _internal_add_dictionary(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_dictionary();
  public:
  float dictionary(int index) const;
  void set_dictionary(int index, float value);
  void add_dictionary(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      dictionary() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_dictionary();

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:Triplet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > array_;
    mutable std::atomic<int> _array_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > dictionary_;
    double value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_train_2eproto;
};
// -------------------------------------------------------------------

class TripletArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TripletArray) */ {
 public:
  inline TripletArray() : TripletArray(nullptr) {}
  ~TripletArray() override;
  explicit PROTOBUF_CONSTEXPR TripletArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TripletArray(const TripletArray& from);
  TripletArray(TripletArray&& from) noexcept
    : TripletArray() {
    *this = ::std::move(from);
  }

  inline TripletArray& operator=(const TripletArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripletArray& operator=(TripletArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripletArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripletArray* internal_default_instance() {
    return reinterpret_cast<const TripletArray*>(
               &_TripletArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TripletArray& a, TripletArray& b) {
    a.Swap(&b);
  }
  inline void Swap(TripletArray* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripletArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripletArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripletArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TripletArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TripletArray& from) {
    TripletArray::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripletArray* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TripletArray";
  }
  protected:
  explicit TripletArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTripletsFieldNumber = 1,
  };
  // repeated .Triplet triplets = 1;
  int triplets_size() const;
  private:
  int _internal_triplets_size() const;
  public:
  void clear_triplets();
  ::Triplet* mutable_triplets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triplet >*
      mutable_triplets();
  private:
  const ::Triplet& _internal_triplets(int index) const;
  ::Triplet* _internal_add_triplets();
  public:
  const ::Triplet& triplets(int index) const;
  ::Triplet* add_triplets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triplet >&
      triplets() const;

  // @@protoc_insertion_point(class_scope:TripletArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triplet > triplets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_train_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Triplet

// repeated int32 array = 1;
inline int Triplet::_internal_array_size() const {
  return _impl_.array_.size();
}
inline int Triplet::array_size() const {
  return _internal_array_size();
}
inline void Triplet::clear_array() {
  _impl_.array_.Clear();
}
inline int32_t Triplet::_internal_array(int index) const {
  return _impl_.array_.Get(index);
}
inline int32_t Triplet::array(int index) const {
  // @@protoc_insertion_point(field_get:Triplet.array)
  return _internal_array(index);
}
inline void Triplet::set_array(int index, int32_t value) {
  _impl_.array_.Set(index, value);
  // @@protoc_insertion_point(field_set:Triplet.array)
}
inline void Triplet::_internal_add_array(int32_t value) {
  _impl_.array_.Add(value);
}
inline void Triplet::add_array(int32_t value) {
  _internal_add_array(value);
  // @@protoc_insertion_point(field_add:Triplet.array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Triplet::_internal_array() const {
  return _impl_.array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Triplet::array() const {
  // @@protoc_insertion_point(field_list:Triplet.array)
  return _internal_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Triplet::_internal_mutable_array() {
  return &_impl_.array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Triplet::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:Triplet.array)
  return _internal_mutable_array();
}

// repeated float dictionary = 2;
inline int Triplet::_internal_dictionary_size() const {
  return _impl_.dictionary_.size();
}
inline int Triplet::dictionary_size() const {
  return _internal_dictionary_size();
}
inline void Triplet::clear_dictionary() {
  _impl_.dictionary_.Clear();
}
inline float Triplet::_internal_dictionary(int index) const {
  return _impl_.dictionary_.Get(index);
}
inline float Triplet::dictionary(int index) const {
  // @@protoc_insertion_point(field_get:Triplet.dictionary)
  return _internal_dictionary(index);
}
inline void Triplet::set_dictionary(int index, float value) {
  _impl_.dictionary_.Set(index, value);
  // @@protoc_insertion_point(field_set:Triplet.dictionary)
}
inline void Triplet::_internal_add_dictionary(float value) {
  _impl_.dictionary_.Add(value);
}
inline void Triplet::add_dictionary(float value) {
  _internal_add_dictionary(value);
  // @@protoc_insertion_point(field_add:Triplet.dictionary)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Triplet::_internal_dictionary() const {
  return _impl_.dictionary_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Triplet::dictionary() const {
  // @@protoc_insertion_point(field_list:Triplet.dictionary)
  return _internal_dictionary();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Triplet::_internal_mutable_dictionary() {
  return &_impl_.dictionary_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Triplet::mutable_dictionary() {
  // @@protoc_insertion_point(field_mutable_list:Triplet.dictionary)
  return _internal_mutable_dictionary();
}

// double value = 3;
inline void Triplet::clear_value() {
  _impl_.value_ = 0;
}
inline double Triplet::_internal_value() const {
  return _impl_.value_;
}
inline double Triplet::value() const {
  // @@protoc_insertion_point(field_get:Triplet.value)
  return _internal_value();
}
inline void Triplet::_internal_set_value(double value) {
  
  _impl_.value_ = value;
}
inline void Triplet::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Triplet.value)
}

// -------------------------------------------------------------------

// TripletArray

// repeated .Triplet triplets = 1;
inline int TripletArray::_internal_triplets_size() const {
  return _impl_.triplets_.size();
}
inline int TripletArray::triplets_size() const {
  return _internal_triplets_size();
}
inline void TripletArray::clear_triplets() {
  _impl_.triplets_.Clear();
}
inline ::Triplet* TripletArray::mutable_triplets(int index) {
  // @@protoc_insertion_point(field_mutable:TripletArray.triplets)
  return _impl_.triplets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triplet >*
TripletArray::mutable_triplets() {
  // @@protoc_insertion_point(field_mutable_list:TripletArray.triplets)
  return &_impl_.triplets_;
}
inline const ::Triplet& TripletArray::_internal_triplets(int index) const {
  return _impl_.triplets_.Get(index);
}
inline const ::Triplet& TripletArray::triplets(int index) const {
  // @@protoc_insertion_point(field_get:TripletArray.triplets)
  return _internal_triplets(index);
}
inline ::Triplet* TripletArray::_internal_add_triplets() {
  return _impl_.triplets_.Add();
}
inline ::Triplet* TripletArray::add_triplets() {
  ::Triplet* _add = _internal_add_triplets();
  // @@protoc_insertion_point(field_add:TripletArray.triplets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Triplet >&
TripletArray::triplets() const {
  // @@protoc_insertion_point(field_list:TripletArray.triplets)
  return _impl_.triplets_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_train_2eproto
