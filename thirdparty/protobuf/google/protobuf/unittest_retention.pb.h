// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/protobuf/unittest_retention.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fretention_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fretention_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2funittest_5fretention_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fprotobuf_2funittest_5fretention_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_google_2fprotobuf_2funittest_5fretention_2eproto;
namespace protobuf_unittest {
class Extendee;
struct ExtendeeDefaultTypeInternal;
extern ExtendeeDefaultTypeInternal _Extendee_default_instance_;
class OptionsMessage;
struct OptionsMessageDefaultTypeInternal;
extern OptionsMessageDefaultTypeInternal _OptionsMessage_default_instance_;
class TopLevelMessage;
struct TopLevelMessageDefaultTypeInternal;
extern TopLevelMessageDefaultTypeInternal _TopLevelMessage_default_instance_;
class TopLevelMessage_NestedMessage;
struct TopLevelMessage_NestedMessageDefaultTypeInternal;
extern TopLevelMessage_NestedMessageDefaultTypeInternal _TopLevelMessage_NestedMessage_default_instance_;
}  // namespace protobuf_unittest
PROTOBUF_NAMESPACE_OPEN
template <>
::protobuf_unittest::Extendee* Arena::CreateMaybeMessage<::protobuf_unittest::Extendee>(Arena*);
template <>
::protobuf_unittest::OptionsMessage* Arena::CreateMaybeMessage<::protobuf_unittest::OptionsMessage>(Arena*);
template <>
::protobuf_unittest::TopLevelMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TopLevelMessage>(Arena*);
template <>
::protobuf_unittest::TopLevelMessage_NestedMessage* Arena::CreateMaybeMessage<::protobuf_unittest::TopLevelMessage_NestedMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace protobuf_unittest {
enum TopLevelMessage_NestedEnum : int {
  TopLevelMessage_NestedEnum_NESTED_UNKNOWN = 0,
};

bool TopLevelMessage_NestedEnum_IsValid(int value);
constexpr TopLevelMessage_NestedEnum TopLevelMessage_NestedEnum_NestedEnum_MIN = static_cast<TopLevelMessage_NestedEnum>(0);
constexpr TopLevelMessage_NestedEnum TopLevelMessage_NestedEnum_NestedEnum_MAX = static_cast<TopLevelMessage_NestedEnum>(0);
constexpr int TopLevelMessage_NestedEnum_NestedEnum_ARRAYSIZE = 0 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TopLevelMessage_NestedEnum_descriptor();
template <typename T>
const std::string& TopLevelMessage_NestedEnum_Name(T value) {
  static_assert(std::is_same<T, TopLevelMessage_NestedEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to NestedEnum_Name().");
  return TopLevelMessage_NestedEnum_Name(static_cast<TopLevelMessage_NestedEnum>(value));
}
template <>
inline const std::string& TopLevelMessage_NestedEnum_Name(TopLevelMessage_NestedEnum value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TopLevelMessage_NestedEnum_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool TopLevelMessage_NestedEnum_Parse(absl::string_view name, TopLevelMessage_NestedEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TopLevelMessage_NestedEnum>(
      TopLevelMessage_NestedEnum_descriptor(), name, value);
}
enum TopLevelEnum : int {
  TOP_LEVEL_UNKNOWN = 0,
};

bool TopLevelEnum_IsValid(int value);
constexpr TopLevelEnum TopLevelEnum_MIN = static_cast<TopLevelEnum>(0);
constexpr TopLevelEnum TopLevelEnum_MAX = static_cast<TopLevelEnum>(0);
constexpr int TopLevelEnum_ARRAYSIZE = 0 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
TopLevelEnum_descriptor();
template <typename T>
const std::string& TopLevelEnum_Name(T value) {
  static_assert(std::is_same<T, TopLevelEnum>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TopLevelEnum_Name().");
  return TopLevelEnum_Name(static_cast<TopLevelEnum>(value));
}
template <>
inline const std::string& TopLevelEnum_Name(TopLevelEnum value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<TopLevelEnum_descriptor,
                                                 0, 0>(
      static_cast<int>(value));
}
inline bool TopLevelEnum_Parse(absl::string_view name, TopLevelEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TopLevelEnum>(
      TopLevelEnum_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class OptionsMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.OptionsMessage) */ {
 public:
  inline OptionsMessage() : OptionsMessage(nullptr) {}
  ~OptionsMessage() override;
  explicit PROTOBUF_CONSTEXPR OptionsMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptionsMessage(const OptionsMessage& from);
  OptionsMessage(OptionsMessage&& from) noexcept
    : OptionsMessage() {
    *this = ::std::move(from);
  }

  inline OptionsMessage& operator=(const OptionsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptionsMessage& operator=(OptionsMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OptionsMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptionsMessage* internal_default_instance() {
    return reinterpret_cast<const OptionsMessage*>(
               &_OptionsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OptionsMessage& a, OptionsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OptionsMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptionsMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptionsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptionsMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OptionsMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OptionsMessage& from) {
    OptionsMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OptionsMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.OptionsMessage";
  }
  protected:
  explicit OptionsMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlainFieldFieldNumber = 1,
    kRuntimeRetentionFieldFieldNumber = 2,
    kSourceRetentionFieldFieldNumber = 3,
  };
  // optional int32 plain_field = 1;
  bool has_plain_field() const;
  void clear_plain_field() ;
  ::int32_t plain_field() const;
  void set_plain_field(::int32_t value);

  private:
  ::int32_t _internal_plain_field() const;
  void _internal_set_plain_field(::int32_t value);

  public:
  // optional int32 runtime_retention_field = 2 [retention = RETENTION_RUNTIME];
  bool has_runtime_retention_field() const;
  void clear_runtime_retention_field() ;
  ::int32_t runtime_retention_field() const;
  void set_runtime_retention_field(::int32_t value);

  private:
  ::int32_t _internal_runtime_retention_field() const;
  void _internal_set_runtime_retention_field(::int32_t value);

  public:
  // optional int32 source_retention_field = 3 [retention = RETENTION_SOURCE];
  bool has_source_retention_field() const;
  void clear_source_retention_field() ;
  ::int32_t source_retention_field() const;
  void set_source_retention_field(::int32_t value);

  private:
  ::int32_t _internal_source_retention_field() const;
  void _internal_set_source_retention_field(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:protobuf_unittest.OptionsMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t plain_field_;
    ::int32_t runtime_retention_field_;
    ::int32_t source_retention_field_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fretention_2eproto;
};// -------------------------------------------------------------------

class Extendee final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.Extendee) */ {
 public:
  inline Extendee() : Extendee(nullptr) {}
  ~Extendee() override;
  explicit PROTOBUF_CONSTEXPR Extendee(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extendee(const Extendee& from);
  Extendee(Extendee&& from) noexcept
    : Extendee() {
    *this = ::std::move(from);
  }

  inline Extendee& operator=(const Extendee& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extendee& operator=(Extendee&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extendee& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extendee* internal_default_instance() {
    return reinterpret_cast<const Extendee*>(
               &_Extendee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Extendee& a, Extendee& b) {
    a.Swap(&b);
  }
  inline void Swap(Extendee* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extendee* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Extendee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Extendee>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extendee& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Extendee& from) {
    Extendee::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extendee* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.Extendee";
  }
  protected:
  explicit Extendee(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<Extendee, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  // @@protoc_insertion_point(class_scope:protobuf_unittest.Extendee)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fretention_2eproto;
};// -------------------------------------------------------------------

class TopLevelMessage_NestedMessage final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:protobuf_unittest.TopLevelMessage.NestedMessage) */ {
 public:
  inline TopLevelMessage_NestedMessage() : TopLevelMessage_NestedMessage(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TopLevelMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopLevelMessage_NestedMessage(const TopLevelMessage_NestedMessage& from);
  TopLevelMessage_NestedMessage(TopLevelMessage_NestedMessage&& from) noexcept
    : TopLevelMessage_NestedMessage() {
    *this = ::std::move(from);
  }

  inline TopLevelMessage_NestedMessage& operator=(const TopLevelMessage_NestedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopLevelMessage_NestedMessage& operator=(TopLevelMessage_NestedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopLevelMessage_NestedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TopLevelMessage_NestedMessage* internal_default_instance() {
    return reinterpret_cast<const TopLevelMessage_NestedMessage*>(
               &_TopLevelMessage_NestedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopLevelMessage_NestedMessage& a, TopLevelMessage_NestedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TopLevelMessage_NestedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopLevelMessage_NestedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopLevelMessage_NestedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopLevelMessage_NestedMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TopLevelMessage_NestedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TopLevelMessage_NestedMessage& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.TopLevelMessage.NestedMessage";
  }
  protected:
  explicit TopLevelMessage_NestedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:protobuf_unittest.TopLevelMessage.NestedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fretention_2eproto;
};// -------------------------------------------------------------------

class TopLevelMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf_unittest.TopLevelMessage) */ {
 public:
  inline TopLevelMessage() : TopLevelMessage(nullptr) {}
  ~TopLevelMessage() override;
  explicit PROTOBUF_CONSTEXPR TopLevelMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TopLevelMessage(const TopLevelMessage& from);
  TopLevelMessage(TopLevelMessage&& from) noexcept
    : TopLevelMessage() {
    *this = ::std::move(from);
  }

  inline TopLevelMessage& operator=(const TopLevelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopLevelMessage& operator=(TopLevelMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TopLevelMessage& default_instance() {
    return *internal_default_instance();
  }
  enum OCase {
    kI = 2,
    O_NOT_SET = 0,
  };

  static inline const TopLevelMessage* internal_default_instance() {
    return reinterpret_cast<const TopLevelMessage*>(
               &_TopLevelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TopLevelMessage& a, TopLevelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TopLevelMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TopLevelMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TopLevelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TopLevelMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TopLevelMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TopLevelMessage& from) {
    TopLevelMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopLevelMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "protobuf_unittest.TopLevelMessage";
  }
  protected:
  explicit TopLevelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TopLevelMessage_NestedMessage NestedMessage;

  using NestedEnum = TopLevelMessage_NestedEnum;
  static constexpr NestedEnum NESTED_UNKNOWN = TopLevelMessage_NestedEnum_NESTED_UNKNOWN;
  static inline bool NestedEnum_IsValid(int value) {
    return TopLevelMessage_NestedEnum_IsValid(value);
  }
  static constexpr NestedEnum NestedEnum_MIN = TopLevelMessage_NestedEnum_NestedEnum_MIN;
  static constexpr NestedEnum NestedEnum_MAX = TopLevelMessage_NestedEnum_NestedEnum_MAX;
  static constexpr int NestedEnum_ARRAYSIZE = TopLevelMessage_NestedEnum_NestedEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NestedEnum_descriptor() {
    return TopLevelMessage_NestedEnum_descriptor();
  }
  template <typename T>
  static inline const std::string& NestedEnum_Name(T value) {
    return TopLevelMessage_NestedEnum_Name(value);
  }
  static inline bool NestedEnum_Parse(absl::string_view name, NestedEnum* value) {
    return TopLevelMessage_NestedEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFFieldNumber = 1,
    kIFieldNumber = 2,
  };
  // optional float f = 1 [(.protobuf_unittest.field_option) = {
  bool has_f() const;
  void clear_f() ;
  float f() const;
  void set_f(float value);

  private:
  float _internal_f() const;
  void _internal_set_f(float value);

  public:
  // int64 i = 2;
  bool has_i() const;
  void clear_i() ;
  ::int64_t i() const;
  void set_i(::int64_t value);

  private:
  ::int64_t _internal_i() const;
  void _internal_set_i(::int64_t value);

  public:
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, id.default_value());
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Mutable(id.number(), _field_type, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                           _field_type, _is_packed>& id) {
    return _proto_TypeTraits::Release(id.number(), _field_type, &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) const {
    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index) {
    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);
    return to_add;
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) const {
    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits, ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<TopLevelMessage, _proto_TypeTraits,
                                       _field_type, _is_packed>& id) {
    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }
  void clear_o();
  OCase o_case() const;
  static const int kSFieldNumber = 2;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::Extendee,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    s;
  // @@protoc_insertion_point(class_scope:protobuf_unittest.TopLevelMessage)
 private:
  class _Internal;
  void set_has_i();

  inline bool has_o() const;
  inline void clear_has_o();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float f_;
    union OUnion {
      constexpr OUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::int64_t i_;
    } o_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_google_2fprotobuf_2funittest_5fretention_2eproto;
};

// ===================================================================



static const int kPlainOptionFieldNumber = 505092806;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::int32_t >, 5, false >
  plain_option;
static const int kRuntimeRetentionOptionFieldNumber = 505039132;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::int32_t >, 5, false >
  runtime_retention_option;
static const int kSourceRetentionOptionFieldNumber = 504878676;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::int32_t >, 5, false >
  source_retention_option;
static const int kFileOptionFieldNumber = 504871168;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  file_option;
static const int kRepeatedOptionsFieldNumber = 504823570;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::RepeatedMessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  repeated_options;
static const int kExtensionRangeOptionFieldNumber = 504822148;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::ExtensionRangeOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  extension_range_option;
static const int kMessageOptionFieldNumber = 504820819;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  message_option;
static const int kFieldOptionFieldNumber = 504589219;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  field_option;
static const int kOneofOptionFieldNumber = 504479153;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::OneofOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  oneof_option;
static const int kEnumOptionFieldNumber = 504451567;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  enum_option;
static const int kEnumEntryOptionFieldNumber = 504450522;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::EnumValueOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  enum_entry_option;
static const int kServiceOptionFieldNumber = 504387709;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::ServiceOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  service_option;
static const int kMethodOptionFieldNumber = 504349420;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::protobuf_unittest::OptionsMessage >, 11, false >
  method_option;
static const int kIFieldNumber = 1;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protobuf_unittest::Extendee,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::int32_t >, 5, false >
  i;

// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OptionsMessage

// optional int32 plain_field = 1;
inline bool OptionsMessage::has_plain_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OptionsMessage::clear_plain_field() {
  _impl_.plain_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t OptionsMessage::plain_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OptionsMessage.plain_field)
  return _internal_plain_field();
}
inline void OptionsMessage::set_plain_field(::int32_t value) {
  _internal_set_plain_field(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.OptionsMessage.plain_field)
}
inline ::int32_t OptionsMessage::_internal_plain_field() const {
  return _impl_.plain_field_;
}
inline void OptionsMessage::_internal_set_plain_field(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.plain_field_ = value;
}

// optional int32 runtime_retention_field = 2 [retention = RETENTION_RUNTIME];
inline bool OptionsMessage::has_runtime_retention_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void OptionsMessage::clear_runtime_retention_field() {
  _impl_.runtime_retention_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t OptionsMessage::runtime_retention_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OptionsMessage.runtime_retention_field)
  return _internal_runtime_retention_field();
}
inline void OptionsMessage::set_runtime_retention_field(::int32_t value) {
  _internal_set_runtime_retention_field(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.OptionsMessage.runtime_retention_field)
}
inline ::int32_t OptionsMessage::_internal_runtime_retention_field() const {
  return _impl_.runtime_retention_field_;
}
inline void OptionsMessage::_internal_set_runtime_retention_field(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.runtime_retention_field_ = value;
}

// optional int32 source_retention_field = 3 [retention = RETENTION_SOURCE];
inline bool OptionsMessage::has_source_retention_field() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void OptionsMessage::clear_source_retention_field() {
  _impl_.source_retention_field_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t OptionsMessage::source_retention_field() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.OptionsMessage.source_retention_field)
  return _internal_source_retention_field();
}
inline void OptionsMessage::set_source_retention_field(::int32_t value) {
  _internal_set_source_retention_field(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.OptionsMessage.source_retention_field)
}
inline ::int32_t OptionsMessage::_internal_source_retention_field() const {
  return _impl_.source_retention_field_;
}
inline void OptionsMessage::_internal_set_source_retention_field(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_retention_field_ = value;
}

// -------------------------------------------------------------------

// Extendee

// -------------------------------------------------------------------

// TopLevelMessage_NestedMessage

// -------------------------------------------------------------------

// TopLevelMessage

// optional float f = 1 [(.protobuf_unittest.field_option) = {
inline bool TopLevelMessage::has_f() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void TopLevelMessage::clear_f() {
  _impl_.f_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float TopLevelMessage::f() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TopLevelMessage.f)
  return _internal_f();
}
inline void TopLevelMessage::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TopLevelMessage.f)
}
inline float TopLevelMessage::_internal_f() const {
  return _impl_.f_;
}
inline void TopLevelMessage::_internal_set_f(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_ = value;
}

// int64 i = 2;
inline bool TopLevelMessage::has_i() const {
  return o_case() == kI;
}
inline void TopLevelMessage::set_has_i() {
  _impl_._oneof_case_[0] = kI;
}
inline void TopLevelMessage::clear_i() {
  if (o_case() == kI) {
    _impl_.o_.i_ = ::int64_t{0};
    clear_has_o();
  }
}
inline ::int64_t TopLevelMessage::i() const {
  // @@protoc_insertion_point(field_get:protobuf_unittest.TopLevelMessage.i)
  return _internal_i();
}
inline void TopLevelMessage::set_i(::int64_t value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:protobuf_unittest.TopLevelMessage.i)
}
inline ::int64_t TopLevelMessage::_internal_i() const {
  if (o_case() == kI) {
    return _impl_.o_.i_;
  }
  return ::int64_t{0};
}
inline void TopLevelMessage::_internal_set_i(::int64_t value) {
  if (o_case() != kI) {
    clear_o();
    set_has_i();
  }
  _impl_.o_.i_ = value;
}

inline bool TopLevelMessage::has_o() const {
  return o_case() != O_NOT_SET;
}
inline void TopLevelMessage::clear_has_o() {
  _impl_._oneof_case_[0] = O_NOT_SET;
}
inline TopLevelMessage::OCase TopLevelMessage::o_case() const {
  return TopLevelMessage::OCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_unittest


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::protobuf_unittest::TopLevelMessage_NestedEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::TopLevelMessage_NestedEnum>() {
  return ::protobuf_unittest::TopLevelMessage_NestedEnum_descriptor();
}
template <>
struct is_proto_enum<::protobuf_unittest::TopLevelEnum> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf_unittest::TopLevelEnum>() {
  return ::protobuf_unittest::TopLevelEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_google_2fprotobuf_2funittest_5fretention_2eproto_2epb_2eh
